#Next you need to apply a threshold to the matrix. In this step, values below a given value (either absolute value or proportional value) will
#be replaced with 0 (meaning no connection or similarity between subjects with a correlation coefficient of that value)
#There are different ways to threshold. Alternatively, one could apply no threshold. We examined both weighted and proportional 
# thresholding. There are more efficient ways to run this code using a loop which better coders will likely prefer. These scripts are 
#from the Brain Connectivity Toolbox (BCT). 


#COMMUNITY DETECTION PARAMETERS
#Low density (The lowest edge density to examine community structure; lowdensity=0.4 )
#step density (The increment value for each edge density to examined, stepdensity=0.6)
#high density (The highest edge density to examine community structure highdensity=1)


#Proportional Thresholding 
# Thresholding scripts come from the BCT. This could be editted to run as a loop which would be more efficient.

#load thresholded matrix
load HCwLM.mat

#set p to the proportional value 

p = .70;
arcs = 0;
fname = 'HCwLM_70p';
W_thr = threshold_proportional(W, p);
CIJ = W_thr;
writetoPAJ(CIJ, fname, arcs);


% p = 0.7;
% arcs = 0;
% fname = 'MCI_LM_70p';
% W_thr = threshold_proportional(W, p);
% CIJ = W_thr;
% writetoPAJ(CIJ, fname, arcs);

% p = 0.05;
% arcs = 0;
% fname = 'MCI_no_LM_allconn_5p';
% W_thr = threshold_proportional(W, p);
% CIJ = W_thr;
% writetoPAJ(CIJ, fname, arcs);
% 
% p = 0.01;
% arcs = 0;
% fname = 'MCI_no_LM_allconn_1p';
% W_thr = threshold_proportional(W, p);
% CIJ = W_thr;
% writetoPAJ(CIJ, fname, arcs);

% p = 0.15;
% arcs = 0;
% fname = 'MCI_no_LM_allconn_15p';
% W_thr = threshold_proportional(W, p);
% CIJ = W_thr;
% writetoPAJ(CIJ, fname, arcs);

% p = 0.2;
% arcs = 0;
% fname = 'MCI_LM_20p';
% W_thr = threshold_proportional(W, p);
% CIJ = W_thr;
% writetoPAJ(CIJ, fname, arcs);
% 
% p = 0.25;
% arcs = 0;
% fname = 'MCI_no_LM_allconn_25ptest';
% W_thr = threshold_proportional(W, p);
% CIJ = W_thr;
% writetoPAJ(CIJ, fname, arcs);
% % 
% 
% p = 0.3;
% arcs = 0;
% fname = 'MCI_LM_30p';
% W_thr = threshold_proportional(W, p);
% CIJ = W_thr;
% writetoPAJ(CIJ, fname, arcs);
% 
% % p = 0.35;
% % arcs = 0;
% % fname = 'MCI_no_LM_allconn_35p';
% % W_thr = threshold_proportional(W, p);
% % CIJ = W_thr;
% % writetoPAJ(CIJ, fname, arcs);
% % 
% p = 0.4;
% arcs = 0;
% fname = 'MCI_LM_40p';
% W_thr = threshold_proportional(W, p);
% CIJ = W_thr;
% writetoPAJ(CIJ, fname, arcs);
% % 
% % p = 0.45;
% % arcs = 0;
% % fname = 'MCI_no_LM_allconn_45p';
% % W_thr = threshold_proportional(W, p);
% % CIJ = W_thr;
% % writetoPAJ(CIJ, fname, arcs);
% 
% p = 0.5;
% arcs = 0;
% fname = 'MCI_LM_50p';
% W_thr = threshold_proportional(W, p);
% CIJ = W_thr;
% writetoPAJ(CIJ, fname, arcs);
% % % 
% % p = 0.55;
% % arcs = 0;
% % fname = 'MCI_no_LM_allconn_55p';
% % W_thr = threshold_proportional(W, p);
% % CIJ = W_thr;
% % writetoPAJ(CIJ, fname, arcs);
% 
% p = 0.6;
% arcs = 0;
% fname = 'MCI_LM_60p';
% W_thr = threshold_proportional(W, p);
% CIJ = W_thr;
% writetoPAJ(CIJ, fname, arcs);
% 
% % p = 0.65;
% % arcs = 0;
% % fname = 'MCI_no_LM_allconn_65p';
% % W_thr = threshold_proportional(W, p);
% % CIJ = W_thr;
% % writetoPAJ(CIJ, fname, arcs);
% 
% % p = 0.7;
% % arcs = 0;
% % fname = 'MCI_LM_70p';
% % W_thr = threshold_proportional(W, p);
% % CIJ = W_thr;
% % writetoPAJ(CIJ, fname, arcs);
% 
% % p = 0.75;
% % arcs = 0;
% % fname = 'MCI_no_LM_allconn_75p';
% % W_thr = threshold_proportional(W, p);
% % CIJ = W_thr;
% % writetoPAJ(CIJ, fname, arcs);
% 
% p = 0.8;
% arcs = 0;
% fname = 'MCI_LM_80p';
% W_thr = threshold_proportional(W, p);
% CIJ = W_thr;
% writetoPAJ(CIJ, fname, arcs);
% 
% % p = 0.85;
% % arcs = 0;
% % fname = 'MCI_no_LM_allconn_85p';
% % W_thr = threshold_proportional(W, p);
% % CIJ = W_thr;
% % writetoPAJ(CIJ, fname, arcs);
% % 
% p = 0.9;
% arcs = 0;
% fname = 'MCI_LM_90p';
% W_thr = threshold_proportional(W, p);
% CIJ = W_thr;
% writetoPAJ(CIJ, fname, arcs);
% 
% % p = 0.95;
% % arcs = 0;
% % fname = 'MCI_no_LM_allconn_95p';
% % W_thr = threshold_proportional(W, p);
% % CIJ = W_thr;
% % writetoPAJ(CIJ, fname, arcs);

# Absolute Thresholding 
# Again, from Conn Toolbox and could be run as loop. 

function W = threshold_proportional(W, p)
%THRESHOLD_PROPORTIONAL     Proportional thresholding
%
%   W_thr = threshold_proportional(W, p);
%
%   This function "thresholds" the connectivity matrix by preserving a
%   proportion p (0<p<1) of the strongest weights. All other weights, and
%   all weights on the main diagonal (self-self connections) are set to 0.
%
%   Inputs: W,      weighted or binary connectivity matrix
%           p,      proportion of weights to preserve
%                       range:  p=1 (all weights preserved) to
%                               p=0 (no weights removed)
%
%   Output: W_thr,  thresholded connectivity matrix
%
%
%   Mika Rubinov, UNSW, 2010

n=size(W,1);                                %number of nodes
W(1:n+1:end)=0;                             %clear diagonal
ind=find(W);                                %find all links
E=sortrows([ind W(ind)], -2);               %sort by magnitude
en=round((n^2-n)*p);                        %number of links to be preserved

if rem(en,2) && isequal(W,W.')              %if symmetric matrix
    en=en+1;                                %ensure symmetry is preserved
end

W(E(en+1:end,1))=0;                         %apply threshold
                        
                        
                        
                        
function W = threshold_absolute(W, thr)
% THRESHOLD_ABSOLUTE    Absolute thresholding
% 
%   W_thr = threshold_absolute(W, thr);
%
%   This function thresholds the connectivity matrix by absolute weight
%   magnitude. All weights below the given threshold, and all weights
%   on the main diagonal (self-self connections) are set to 0.
%
%   Inputs: W           weighted or binary connectivity matrix
%           thr         weight treshold
%
%   Output: W_thr       thresholded connectivity matrix
%
%
%   Mika Rubinov, UNSW, 2009-2010

W(1:size(W,1)+1:end)=0;                 %clear diagonal
W(W<thr)=0;                             %apply threshold
